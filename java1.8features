Java Stream Filter
Java stream provides a method filter() to filter stream elements on the basis of given predicate. Suppose you want to get only even elements of your list then you can do this easily with the help of filter method.

This method takes predicate as an argument and returns a stream of consisting of resulted elements.





Java Method References
Java provides a new feature called method reference in Java 8. Method reference is used to refer method of functional interface. It is compact and easy form of lambda expression. Each time when you are using lambda expression to just referring a method, you can replace your lambda expression with method reference. In this tutorial, we are explaining method reference concept in detail.

Types of Method References
There are following types of method references in java:

1)Reference to a static method.

2)Reference to an instance method.

3)Reference to a constructor.


public interface Sayable1 {
    void say();
}

public class MethodReference1 {
    public static void saySomething(){
        System.out.println("Hello, this is static method.");
    }
    public static void main(String[] args) {
        // Referring static method
        Sayable1 sayable = MethodReference::saySomething;
        // Calling interface method
        sayable.say();
    }
}





Java functional interfaces:

Functional Interfaces In Java
A functional interface is an interface that contains only one abstract method. They can have only one functionality to exhibit.
From Java 8 onwards, lambda expressions can be used to represent the instance of a functional interface. 
A functional interface can have any number of default methods. Runnable, ActionListener, 
Comparable are some of the examples of functional interfaces.
Before Java 8, we had to create anonymous inner class objects or implement these interfaces.


@FunctionalInterface Annotation
@FunctionalInterface annotation is used to ensure that the functional interface can’t have more than one abstract method. 
In case more than one abstract methods are present, the compiler flags an ‘Unexpected @FunctionalInterface annotation’ message. 
However, it is not mandatory to use this annotation.

Ex:

package madhav;
@FunctionalInterface
public interface Sample {
 String getName(String name);
}


package madhav;

public class Testing {

public static void main(String[] args) {
System.out.println("sampleTest");
Sample s=(String x)->x+x;
String name=s.getName("test--");
System.out.println(name);

	}

}



java Reactive programing:

Useful links:

https://www.javacodegeeks.com/2016/06/spring-reactive-samples.html

How do I go reactive in Java?

With its latest releases (starting with Java 8), Java itself has made some attempts to introduce built-in reactivity, 
yet these attempts are not very popular with developers to date. But there’re some live and regularly updated third-party
implementations for reactive programming in Java that help to save the day and thus are particularly loved and cherished by 
Java developers.

RxJava was the first Reactive Extension API specific for the Java platform. It works with Java 6 and provides an opportunity 
to write asynchronous, event-based programs for both Java and Android Java, which is very convenient.

Spring Reactor is another framework for Java from Spring developers. It is quite similar to RxJava but has simpler abstraction.
The framework has managed to win popularity due to the possibility to leverage benefits of Java 8.


